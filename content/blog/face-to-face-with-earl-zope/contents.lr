title: Face to face with "Earl Zope" and his henchmen
---
author: JÃ¼rgen Gmach
---
body:

> **_NOTE:_**  This blog post is **WORK IN PROGRESS** and will be updated regularly. Though, this post is first and foremost written for myself, please do not hesitate to drop me a line at juergen dot gmach at googlemail com or directly contribute to this article via [GitHub.com](https://github.com/jugmac00/jugmac00.github.io.source).

This blog post tries to ease beginning and keeping up with development of the open source web application server [Zope](https://zope.readthedocs.io/en/latest/) and its universe.

## what makes it hard to start contributing to Zope
- **Zope** is a very mature product, as it was launched already back in [1999](https://en.wikipedia.org/wiki/Zope)
- **Zope** underwent some major architectural changes (keyword [ZCA](http://muthukadan.net/docs/zca.html#introduction))
- **Zope** itself is relatively complex
- there is also a complex ecosystem around it
  - [Buildout](http://www.buildout.org/en/latest/)
  - [TravisCI](https://travis-ci.org/)
  - [GitHub.com](https://github.com/zopefoundation)
  - [tox](https://tox.readthedocs.io/en/latest/) / [quick introduction](https://opensource.com/article/19/5/python-tox)
  - [zope.testrunner](https://zopetestrunner.readthedocs.io/en/latest/)
  - [Read the Docs](https://readthedocs.org/)
  - ...
- documentation is partially out of date (but there is an effort to fix this)
- there are many developers which contribute for years, or even more than a decade, not many new developers
- there are many **unwritten** rules

## prerequisites

**Zope** and probably the most of its related packages are licensed under the [ZPL](https://directory.fsf.org/wiki/License:ZPL-2.1). In order to contribute to the project, you need to sign a [contributor's agreement](http://docs.zope.org/developer/becoming-a-committer.html). If you do not get a reply to your application in a reasonable amount of time, please resend your email.

## development process

Once your application has been accepted, which is a mere formality, you may to start contributing.

### where to find the source code

Zope and all its related packages, which reside under the umbrella of the Zope Foundation, are hosted at [GitHub](https://github.com/zopefoundation).

For instance, the repository for Zope is located at https://github.com/zopefoundation/Zope

> **_NOTE:_**  There are plans to merge the Zope Foundation into the [Plone Foundation](https://plone.org/foundation) - current status is unknown.

### flow

Though not 100% consistent, usually you cannot and you should not directly work on the master branch.

The recommended way is to clone the repository and work on a new branch.

Once finished, push your branch to the repository and create a pull request. Both your branch and the pull request will get automatically tested by TravisCI (see below).

Most repositories need both green tests and a successful review before a pull request gets merged.

Usually you will merge the branch yourself - in order to show off that you have signed the contributor agreement.

After the pull request had been merged, please delete your branch.

> **_NOTE:_** If you want to implement very small changes - e.g. fixing typos - you can directly edit the file in your browser by clicking the pencil icon when viewing the file on GitHub.com. 

### tests

It is highly recommended that all code changes, bug fixes and new features should be tested by automatic tests.

Unlike most other Python projects, **Zope/universe** does not make use of pytest - which can be both quite surprising and a bit of a hurdle.

**Zope/universe** makes heavily use of [zope.testrunner](https://pypi.org/project/zope.testrunner/).

### supported python versions

Currently, Python 2.7, 3.5, 3.6, 3.7 and 3.8 (dev) are supported for most of the **Zope 4/universe** packages. This reflects the officially supported Python versions.

Some packages also support [PyPy](https://pypy.org/).

Afaik, there are plans to drop support for Python 2.7 with Zope 5.

When adding support for a new Python version, or dropping support for an old one, you have to update several files:
- .travis.yml
- tox.ini
- setup.py
- CHANGES.rst

### continuous integration - mostly via travisci

Whenever you push to a branch or make a pull request, [TravisCI](https://travis-ci.org) automatically pulls your changes and runs the project's test suite.

This is configured via a **.travis.yml** file at root level of the repository.

> **_NOTE:_**  For packages, which should be supported on the Windows plattform, [AppVeyor](https://www.appveyor.com/) gets used.

### travisci configuration

The configuration for TravisCI changes on quite a regular basis. There are OS upgrades, new and deprecated Python versions, syntax changes and also new and deprecated features for Travis itself.

Depending on how the tests are run, whether there are checks for styles or coverage, the **.travis.yml** can be quite different for different packages.

You can have a look at the recently updated configuration for [zExceptions](https://github.com/zopefoundation/zExceptions/blob/master/.travis.yml) as a good example with up-to-date best practices.

### deprecated travisci configuration

If you happen to see a **sudo: false/true** option in a **.travis.yml** file, you can safely remove it (cf. https://blog.travis-ci.com/2018-11-19-required-linux-infrastructure-migration).

### travisci trouble shooting

- flaky tests - sometimes tests fail for **no reason** - you can try to dig deeper or just re-run the build by clicking the "rebuild" button on the TravisCI website.
- bad cache => clear cache - rarely this is necessary; a re-run should do the job most of the time - please find more information at the [TravisCI documentation site](https://docs.travis-ci.com/user/caching/#clearing-caches).
- **ImportError: libpython3.8m.so.1.0**: cannot open shared object file: No such file or directory" => clear cache in TravisCI and restart build 1)

1) Information by Dieter Maurer:
>The Python 3.8 problem was (likely) discussed in the Python mailing list today: the newest Python version has changed **sys.implementation.cache_tag** which prevents Python from finding shared objects installed for earlier versions. "pip" on the other hand seems not to take thin into account and thinks that the older version is still usable. Clearing the cache should fix the problem.

## updates

**2019.05.03**
-  update **what makes it hard to start contributing to Zope**; also add links

**2019.05.04**
- add section about support Python versions

**2019.05.06**
- add link to a very concise tox introduction
---
twitter_handle: jugmac00
---
pub_date: 2019-05-03
